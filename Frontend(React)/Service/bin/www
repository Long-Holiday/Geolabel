#!/usr/bin/env node

/**
 * Module dependencies.
 */
/**
 * 创建HTTP服务器：使用Node.js的http模块创建一个HTTP服务器，服务器的请求处理函数由app模块提供。
设置监听端口：从环境变量中获取端口号，如果没有设置，则默认为3000。然后让服务器开始监听这个端口。
处理服务器错误：当服务器发生错误时，会调用onError函数进行处理。这个函数会根据错误的类型，打印出友好的错误信息。
打印监听信息：当服务器开始监听时，会调用onListening函数，打印出服务器正在监听的地址信息。
 * 
 */
// 导入app模块，这是你的应用程序主体
var app = require("../app");
// 导入debug模块，用于在开发过程中打印调试信息
var debug = require("debug")("demo:server");
// 导入http模块，用于创建HTTP服务器
var http = require("http");

// 从环境变量中获取端口号，如果没有设置，则默认为3000
var port = normalizePort(process.env.PORT || "3000");

// 使用http模块创建一个新的HTTP服务器，app.callback()是你的应用程序的请求处理函数
var server = http.createServer(app.callback());

// 让服务器开始监听指定的端口，所有网络接口都可以访问到这个端口
server.listen(port, () => {
  console.log(`服务启动成功!监听端口${port}中...`);
});
// 当服务器发生错误时，调用onError函数处理
server.on("error", onError);
// 当服务器开始监听时，调用onListening函数
server.on("listening", onListening);

// normalizePort函数用于处理端口号，确保它是一个有效的端口号
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // 如果端口号不是数字，那么它可能是一个命名管道，直接返回
    return val;
  }

  if (port >= 0) {
    // 如果端口号是一个非负整数，那么它是一个有效的端口号，直接返回
    return port;
  }

  // 否则，返回false表示端口号无效
  return false;
}

// onError函数用于处理服务器发生错误时的情况
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // 根据错误的类型，打印出友好的错误信息
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// onListening函数在服务器开始监听时被调用，用于打印出监听的地址信息
function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
