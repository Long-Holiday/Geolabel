import { useState, useRef, useEffect, useMemo, useCallback } from 'react';
import { Button, Form, Input, message, Popconfirm, Tag } from 'antd';
import { reqSaveService, reqExportService, reqAuditTask, reqAssistFunction, reqUqdateLabel,
  reqGetModelList,reqInferenceFunction} from '@/services/map/api';
import { Vector as VectorLayer } from 'ol/layer';
import { Vector as VectorSource } from 'ol/source';
import { Fill, Stroke, Style } from 'ol/style';
import { Circle as CircleStyle } from 'ol/style';
import 'ol-layerswitcher/dist/ol-layerswitcher.css';
import 'ol/ol.css'; //引入css样式才能起作用，比如tooltips等样式
import Draw, { createBox, createRegularPolygon } from 'ol/interaction/Draw';
import { GeoJSON } from 'ol/format';
import './style.less';
import {Modify, Select, Translate} from 'ol/interaction';
import { CheckOutlined, CloseOutlined, DeleteOutlined, RollbackOutlined } from '@ant-design/icons';
import Uploader from './Uploader';
import { Redirect, Access, useAccess, history, useModel } from 'umi';
import { Decrypt } from '@/utils/utils';
import BasicMap from './components/basicMap';
import useMap from '@/hooks/map/useMap';
import CollectionCreateForm from '@/components/CollectionCreateForm';
import { Collection } from 'ol';
import Polygon from 'ol/geom/Polygon';
export default function () {
  const shapeSelect = useRef();
  const layerSelect = useRef();
  const [showUploader, setShowUploader] = useState(false);
  const [showAuditLoader, setShowAuditLoader] = useState(false);
  const [markSource, setMarkSource] = useState(new VectorSource());
  const [toolbarState, setToolbarState] = useState({
    drawState: false,
    color: '',
    sourceKey: null,
    markSource: new VectorSource(),
    currentLayer: '',
  });
  const {
    initialState: {
      currentState: { currentUser },
    },
  } = useModel('@@initialState');
  //挂载地图并定位服务 hook
  const { typeList, taskInfo, setMap, mapRef, markGeoJsonArr, mapExtent } = useMap();
  const access = useAccess(); // access 实例的成员: canAdmin, canUser
  let select;
  //修改标注显示部分的代码，将原来标注显示部分的代码由useEffect改为在generateMarkLayer函数中进行,根据用户角色进行判断，仅当用户为管理员时才进行渲染
  const generateMarkLayer = useMemo(() => {
    console.log('遍历已标注的的标注图层');
    // 如果是管理员，则显示所有用户的标注;否则只显示自己的
    //修改点1，添加安全校验
    const userList = access.canAdmin
      ? taskInfo?.data?.[0]?.userArr ?? []  // 如果是管理员，使用所有用户
      : taskInfo?.data?.[0]?.userArr?.filter(({ username }) => username === currentUser) ?? []; // 否则只显示当前用户

    const totalTypeIdArr = [];
    if (userList) {
      for (const { typeArr,username } of userList) {
        //修改点2，管理员显示所有标注
        if(access.canAdmin){
          totalTypeIdArr.push(...typeArr);
          continue
        }
        totalTypeIdArr.push(...typeArr);
      }
    }
    let vectorLayerArr = [];
    if (totalTypeIdArr.length) {
      vectorLayerArr = totalTypeIdArr.map(({ typeColor, typeName, typeId }) => {
        const typeSource = new VectorSource({
          format:new GeoJSON(),
          projection:"EPSG:3857"
        });
        typeSource?.set('typeid', typeId);
        for (const item of markGeoJsonArr) {
          if (typeId == item.typeId) {
            let existedFeatures = new GeoJSON().readFeatures(item.markGeoJson);
            let map = existedFeatures.map(existedFeaturesItem=>{
              existedFeaturesItem.set('markId', item.markId);
              return existedFeaturesItem;
            });
            typeSource.addFeatures(map);
          }
        }
        const vectorLayer = new VectorLayer({
          title: typeName,
          source: typeSource,
          style: new Style({
            //填充
            fill: new Fill({
              color: 'rgba(255, 255, 255, 0.2)',
            }),
            //边框
            stroke: new Stroke({
              color: typeColor,
              // color: '#6699ff',
              width: 3,
            }),
          }),
        });
        vectorLayer.set('typeid', typeId);
        vectorLayer.setZIndex(99);
        return vectorLayer;
      });
    }

    // 添加“模型作用范围”图层
    const modelScopeSource = new VectorSource();
    const modelScopeLayer = new VectorLayer({
      title: '模型作用范围',
      source: modelScopeSource,
      style: new Style({
        fill: new Fill({
          color: 'rgba(255, 255, 255, 0.2)',
        }),
        stroke: new Stroke({
          color: '#ffcc33', // 使用特定颜色区分
          width: 3,
        }),
      }),
    });
    modelScopeLayer.set('typeid', 'modelScope');
    modelScopeLayer.setZIndex(99);
    vectorLayerArr.push(modelScopeLayer);

    // 添加到地图
    if (mapRef.current && vectorLayerArr.length > 0) {
      vectorLayerArr.forEach(layer => {
        mapRef.current.addLayer(layer);
      });
    }

    return vectorLayerArr;
  }, [markGeoJsonArr, access, currentUser, taskInfo, mapRef]); // 依赖项要包含所有可能影响图层生成的变量
  // useEffect(async () => {
  //   // 遍历设定方案动态添加图层
  //   //用户标注此处不生效，审核时生效
  //   for (const vector of generateMarkLayer) {
  //     vector.setZIndex(99);
  //     mapRef.current.addLayer(vector);
  //     console.log('添加图层');
  //     console.log(vector);
  //     vector.setVisible(true);
  //
  //   }
  // }, [markGeoJsonArr]);
  useEffect(async () => {
    // 当前选择的数据源
    const currentSelectSource = toolbarState.markSource;
    // 添加绘制效果
    let shapeDraw
    const addDrawInteraction = () => {
      let value = shapeSelect.current.value;
      let geometryFunction;
      switch (value) {
        // 正方形
        case 'Square':
          value = 'Circle';
          geometryFunction = createRegularPolygon(4);
          break;
        // 矩形
        case 'Box':
          value = 'Circle';
          geometryFunction = createBox();
          break;
        // 多边形
        case 'Polygon':
          value = 'Polygon';
          break;
        case 'Point':  // 新增对 Point 类型的处理
          value = 'Point';
          break;
      }

// 定义绘制样式，与当前图层样式一致
      let drawStyle;
      if (value === 'Point') {
        drawStyle = new Style({
          image: new CircleStyle({
            radius: 6, // 设置点的半径为 6 像素
            fill: new Fill({
              color: 'rgba(255, 255, 255, 0.2)', // 与图层填充一致
            }),
            stroke: new Stroke({
              color: toolbarState.color || '#6699ff', // 使用当前图层的颜色
              width: 3, // 与图层边框宽度一致
            }),
          }),
        });
      }
      shapeDraw = new Draw({
        source: currentSelectSource,
        type: value,
        geometryFunction: geometryFunction,
        style: drawStyle // 将自定义样式应用到绘制交互
      });
      console.log('标注的数据源');
      console.log(currentSelectSource);

      // shapeDraw.on('drawend', function (event) {
      //   var feature = event.feature;
      //   var polygon = feature.getGeometry();
      //   var coords = polygon.getCoordinates()[0];
      //   var squareCoords = [
      //     coords[0],
      //     [coords[0][0], coords[1][1]],
      //     coords[1],
      //     [[coords[1][0], coords[0][1]], coords[0]],
      //   ];
      //   console.log(squareCoords);
      //   // var square = new Polygon([squareCoords]);
      //   // feature.setGeometry(square);
      // });
      shapeDraw.on('drawend', (event) => {
        // 获取绘制的矩形
        const geometry = event.feature.getGeometry();
        // 获取矩形的坐标
        const coordinates = geometry.getExtent();
        // 获取地图分辨率
        const resolution = mapRef.current.getView().getResolution();
        // 获取像素坐标
        // const pixelCoordinates = coordinates.map((coordinate) => {
        //   return mapRef.current.getPixelFromCoordinate(coordinate).map(Math.round);
        // });
        // // 计算像素矩形框
        // const left = Math.min(pixelCoordinates[0][0], pixelCoordinates[2][0]);
        // const right = Math.max(pixelCoordinates[0][0], pixelCoordinates[2][0]);
        // const top = Math.min(pixelCoordinates[0][1], pixelCoordinates[2][1]);
        // const bottom = Math.max(pixelCoordinates[0][1], pixelCoordinates[2][1]);
        // console.log(`像素矩形框: 左: ${left}, 右: ${right}, 上: ${top}, 下: ${bottom}`);
        //绘制点样式
        const feature = event.feature;
        if (feature.getGeometry().getType() === 'Point') {
          feature.setStyle(drawStyle); // 确保绘制完成后点保持自定义样式
        }
      });
      mapRef.current.addInteraction(shapeDraw);
    };
    // 添加绘制的交互
    select = new Select({
      layers: [toolbarState.currentLayer],
    });
    const translate = new Translate({
      features: new Collection([toolbarState.currentLayer]),
    });
    mapRef.current?.addInteraction(translate);

    mapRef.current?.addInteraction(select);
    const modify = new Modify({ source: toolbarState.markSource });
    //查看修改后的feature信息
    modify.on('modifyend', (event) => {
      // 获取绘制的矩形
      const feature = event.features;
      console.log("修改后的feature")
      console.log(feature)
      console.log(event)
      console.log(toolbarState.currentLayer)

    });
    //对绘制图形进行修改
    mapRef.current?.addInteraction(modify);
    // 标注形状选择
    const onSelect = () => {
      mapRef.current.removeInteraction(shapeDraw);
      mapRef.current.removeInteraction(modify);
      if (shapeSelect.current.value != 'None') {
        addDrawInteraction();
        mapRef.current.addInteraction(modify);
      }
    };
    if (shapeSelect.current) {
      shapeSelect.current.onchange = onSelect;
    }
    // 按下esc取消绘制
    document.onkeydown = (event) => {
      if (event.key == 'Escape') {
        shapeSelect.current.value = 'None';
        onSelect();
      }
    };
    // 选择编辑图层
    const onLayerSelect = () => {
      const key = layerSelect.current.value;
      if (key != 'None') {
        // 模型作用范围标注工具调用
        if (key === 'modelScope') {
          const modelScopeLayer = generateMarkLayer.find(layer => layer.get('typeid') === 'modelScope');
          setToolbarState({
            color: '#ffcc33', // 与图层颜色一致
            drawState: false,
            sourceKey: 'modelScope',
            markSource: modelScopeLayer.getSource(),
            currentLayer: modelScopeLayer,
          });
        } else {
          const type = typeList.data.filter((item) => {
            return item.typeId == key;
          });
          setToolbarState({
            color: type[0].typeColor,
            drawState: false,
            sourceKey: key,
            markSource: currentSource(key),
            currentLayer: currentLayer(key),
          });
        }
      } else {
        setToolbarState({
          color: null,
          drawState: true,
          sourceKey: null,
          markSource: new VectorSource(),
        });
        // mapRef.current.removeInteraction(modify);
      }
      mapRef.current.removeInteraction(shapeDraw);
      shapeSelect.current.value = 'None';
    };
    if (layerSelect.current) {
      layerSelect.current.onchange = onLayerSelect;
    }
    console.log(mapExtent, 'mapExtent');
  }, [markGeoJsonArr, toolbarState.markSource, mapExtent]);

  let featuresList = []; //绘制的要素集合
  // 遍历生成不同目标图层
  // const generateMarkLayer = useMemo(() => {
  //   console.log('遍历已标注的的标注图层');
  //   // 收集所有标签信息，用于渲染其他用户标注的图层
  //   const currentUserTagList = taskInfo.data[0].userArr;
  //   const totalTypeIdArr = [];
  //   if (currentUserTagList) {
  //     for (const { typeArr,username } of currentUserTagList) {
  //       if (username===currentUser){
  //         totalTypeIdArr.push(...typeArr);
  //       }
  //     }
  //   }
  //   console.log(totalTypeIdArr, 'totalTypeIdArr');
  //   let vectorLayerArr = [];
  //   if (totalTypeIdArr.length) {
  //     console.log(totalTypeIdArr);
  //     //只对当前用户生成标注图形
  //     vectorLayerArr = totalTypeIdArr.map(({ typeColor, typeName, typeId }) => {
  //       const typeSource = new VectorSource({
  //           format:new GeoJSON(),
  //         projection:"EPSG:3de57"
  //       });
  //       typeSource?.set('typeid', typeId);
  //       for (const item of markGeoJsonArr) {
  //         if (typeId == item.typeId) {
  //           let existedFeatures = new GeoJSON().readFeatures(item.markGeoJson);
  //           let map = existedFeatures.map(existedFeaturesItem=>{
  //             existedFeaturesItem.set('markId', item.markId);
  //             return existedFeaturesItem;
  //           });
  //           typeSource.addFeatures(map);
  //         }
  //       }
  //       const vectorLayer = new VectorLayer({
  //         title: typeName,
  //         source: typeSource,
  //         style: new Style({
  //           //填充
  //           fill: new Fill({
  //             color: 'rgba(255, 255, 255, 0.2)',
  //           }),
  //           //边框
  //           stroke: new Stroke({
  //             color: typeColor,
  //             // color: '#6699ff',
  //             width: 3,
  //           }),
  //         }),
  //       });
  //       vectorLayer.set('typeid', typeId);
  //       return vectorLayer;
  //     });
  //   }
  //   /*// const vectorLayerArr = markGeoJsonArr.map(({ typecolor, typename, typeid, markGeoJson }) => {
  //   //   const typeSource = new VectorSource();
  //   //   typeSource?.set('typeid', typeid);
  //   //   typeSource.addFeatures(new GeoJSON().readFeatures(markGeoJson));
  //   //   const vectorLayer = new VectorLayer({
  //   //     title: typename,
  //   //     source: typeSource,
  //   //     style: new Style({
  //   //       //填充
  //   //       fill: new Fill({
  //   //         color: 'rgba(255, 255, 255, 0.2)',
  //   //       }),
  //   //       //边框
  //   //       stroke: new Stroke({
  //   //         color: typecolor,
  //   //         // color: '#6699ff',
  //   //         width: 3,
  //   //       }),
  //   //     }),
  //   //   });
  //   //   vectorLayer.set('typeid', typeid);
  //   //   return vectorLayer;
  //   // });
  //   //#region
  //   // if (typeList.data) {
  //   //   vectorLayerArr = typeList.data.map(({ typecolor, typename, typeid }) => {
  //   //     const typeSource = new VectorSource();
  //   //     typeSource?.set('typeid', typeid);
  //   //     for (const item of markGeoJsonArr) {
  //   //       if (typeid == item.typeid) {
  //   //         typeSource.addFeatures(new GeoJSON().readFeatures(item.markGeoJson));
  //   //       }
  //   //     }
  //   //     const vectorLayer = new VectorLayer({
  //   //       title: typename,
  //   //       source: typeSource,
  //   //       style: new Style({
  //   //         //填充
  //   //         fill: new Fill({
  //   //           color: 'rgba(255, 255, 255, 0.2)',
  //   //         }),
  //   //         //边框
  //   //         stroke: new Stroke({
  //   //           color: typecolor,
  //   //           // color: '#6699ff',
  //   //           width: 3,
  //   //         }),
  //   //       }),
  //   //     });
  //   //     vectorLayer.set('typeid', typeid);
  //   //     return vectorLayer;
  //   //   });
  //   // }
  //   //#endregion*/
  //   return vectorLayerArr;
  // }, [markGeoJsonArr, taskInfo]);
  // 获取当前标注的数据源
  const currentSource = useCallback(
    (typeid) => {
      for (const layer of generateMarkLayer) {
        if (layer.getSource().get('typeid') == typeid) {
          return layer.getSource();
        }
      }
    },
    [generateMarkLayer],
  );
  // 获取当前标注的图层
  const currentLayer = useCallback(
    (typeid) => {
      for (const layer of generateMarkLayer) {
        if (layer.get('typeid') == typeid) {
          //TODO
          return layer;
        }
      }
    },
    [generateMarkLayer],
  );
  // 回滚
  const undo = useCallback(() => {
    try {
      let features = toolbarState.currentLayer.getSource().getFeatures();
      let feature = features.pop();
      if (feature) {
        toolbarState.currentLayer.getSource().removeFeature(feature);
        featuresList.push(feature);
      }
    } catch (error) {
      message.warn('请选择图层');
    }
  }, [toolbarState.currentLayer]);
  // 恢复
  const recover = useCallback(() => {
    let feature;
    feature = featuresList.pop();
    if (feature) {
      toolbarState.currentLayer.getSource().addFeature(feature);
    }
  }, [toolbarState.currentLayer]);
  const getTaskId = useMemo(() => {
    let TASKID = window.sessionStorage.getItem('taskId');
    // let TASKID=taskInfo.data[0].taskname
    let taskId=Decrypt(TASKID)
    return taskId;
  }, []);
  const save = async () => {
    let taskId = getTaskId;
    const jsondataArr = [];
    for (const layer of generateMarkLayer) {
      const type = layer.get('typeid'); // 使用 get 方法获取图层的 typeid
      // 跳过“模型作用范围”图层
      if (type === 'modelScope') {
        continue;
      }
      const features = layer.getSource().getFeatures();
      debugger
      const typeId = layer.getSource().get('typeid');
      let extentArr = [];
      if (features.length) {
        for (const feature of features) {
          extentArr.push({feature:feature?.getGeometry().getCoordinates(),
            markId:feature?.get('markId')});
        }
      }
      // 矩形顺时针，旋转正方形是以开始的点顺时针，多边形是以开始的点逆时针
      console.log(extentArr, 'extentArr');
      jsondataArr.push({ extentArr, typeId });
    }
    if (jsondataArr.length != 0) {
      // 保存标注结果，传任务id和标注数据
      console.log('保存的数据', { id: Number(taskId), jsondataArr });
      try {
        const hide = message.loading('正在保存');
        let result = await reqSaveService({
          userid: taskInfo.data[0].userArr.filter(({ username }) => username == currentUser)[0]
            .userid,
          id: taskId,
          jsondataArr,
          typeArr: taskInfo.data[0].userArr.filter(({ username }) => username == currentUser)[0]
            .typeArr,
        });
        if (result) {
          hide();
          message.success('保存成功！');
        } else {
          message.error('保存失败！');
        }
      } catch (error) {
        message.error('后台异常，请稍后重试！');
      }
    } else {
      message.warn('不能保存空数据！');
    }
  };
  // 删除要素
  const deleteFeature = useCallback(() => {
    let selectFeasuresList = select.getFeatures().getArray();
    if (selectFeasuresList.length > 0) {
      try {
        selectFeasuresList.forEach((item) => {
          toolbarState.currentLayer.getSource().removeFeature(item);
        });
      } catch (error) {
        message.error('标注未完成！');
      }
    } else {
      message.warn('未标注或未选中图形！');
    }
    select.getFeatures().clear();
  }, [select, toolbarState.currentLayer]);
  // 导出获得数据并发送请求
  const onExport = async (JsonObj) => {
    const hide = message.loading('正在导出样本数据');
    let data = { jsonData: JsonObj };
    try {
      reqExportService(data).then((res) => {
        hide();
        let link = document.createElement('a');
        link.style.display = 'none';
        link.target = '_blank';
        link.href = URL.createObjectURL(res);
        link.download = '标注数据.zip';
        document.body.appendChild(link);
        link.click();
        URL.revokeObjectURL(link.href);
        document.body.removeChild(link);
      });
    } catch (e) {
      hide();
      message.error('导出失败，请稍后重试！');
      return false;
    }
    return true;
  };
  const handleGetShp = (shp) => {
    //直接转化成对象，加入地图，如下
    const importJson = JSON.parse(shp);
    setMarkSource(markSource.addFeatures(new GeoJSON().readFeatures(importJson)));
  };
  // 导出
  const exportFile = useCallback(() => {
    let features = toolbarState.currentLayer.getSource().getFeatures();
    let jsonobj = new GeoJSON().writeFeatures(features);
    if (JSON.parse(jsonobj).features.length != 0) {
      onExport(JSON.parse(jsonobj));
    } else {
      message.warn('不能导出空的数据');
    }
  }, [toolbarState.currentLayer]);
  // 不通过确认
  const confirm = useCallback(() => {
    console.log(11);
  }, []);
  // 通过审核
  const passAudit = useCallback(async () => {
    let taskid = getTaskId;
    try {
      const hide = message.loading('正在提交');
      const result = await reqAuditTask({ taskid, status: 1 });
      if (result.code == 200) {
        hide();
        message.success('提交成功！');
        history.push('/taskmanage');
      } else {
        message.error('提交失败！');
      }
    } catch (error) {
      message.error('后台异常，请稍后重试！');
    }
  }, []);
  const onCreate = useCallback(async ({ auditfeedback }) => {
    let taskid = getTaskId;
    try {
      const hide = message.loading('正在提交');
      const result = await reqAuditTask({ taskid, status: 2, auditfeedback });
      if (result.code == 200) {
        hide();
        message.success('提交成功！');
        history.push('/taskmanage');
      } else {
        message.error('提交失败！');
      }
      setShowAuditLoader(false);
    } catch (error) {
      message.error('后台异常，请稍后重试！');
      setShowAuditLoader(false);
    }
  }, []);
  const onCancel = useCallback(() => {
    setShowAuditLoader(false);
  }, []);

  // 机器学习辅助生成按键（模型及参数选择）——区分目标识别和地物分类
  const [assistInput, setAssistInput] = useState('');
  const [assistFunction, setAssistFunction] = useState('');
  const [param1, setParam1] = useState('');
  const [param2, setParam2] = useState('');
  const [param3, setParam3] = useState('');
  const [param4, setParam4] = useState('');
// 定义获取 user_id 的函数
  const getUserId = () => {
    const user = taskInfo?.data[0]?.userArr?.find(({ username }) => username === currentUser);
    return user?.userid;
  };

// 定义路径映射
  const getModelPathByTaskType = (taskType) => {
    const userId = getUserId();
    const pathMap = {
      '目标检测': '/home/change/labelcode/labelMark/trained_models/' + userId +'/detection_results',
      '地物分类': '/home/change/labelcode/labelMark/trained_models/' + userId + '/segmentation_results',
    };
    return pathMap[taskType] || '/models/default';
  };

// 状态定义（模型推理组件）
  const [modelList, setModelList] = useState([]);
  const [selectedModel, setSelectedModel] = useState('');

// 获取模型列表
  useEffect(() => {
    const fetchModelList = async () => {
      const taskType = taskInfo?.data[0]?.type;
      if (!taskType) {
        console.warn('任务类型未定义，无法获取模型列表');
        return;
      }

      const modelPath = getModelPathByTaskType(taskType);
      console.log('Fetching models from path:', modelPath);

      try {
        const response = await reqGetModelList({ path: modelPath });
        if (response.code === 200) {
          setModelList(response.data);
        } else {
          message.error('获取模型列表失败');
        }
      } catch (error) {
        message.error('获取模型列表失败：' + error.message);
      }
    };
    fetchModelList();
  }, [taskInfo]);

// 辅助功能（模型训练）
  const handleAssistClick = async () => {
    let taskId = getTaskId;
    const taskType = taskInfo?.data[0].type;

    if (!assistFunction || assistFunction === 'none') {
      message.error('请先选择一个模型！');
      return;
    }

    const userId = getUserId();
    if (!userId) {
      message.error('无法获取用户 ID，请检查用户信息');
      return;
    }

    let parameters = {};
    if (taskType === '目标检测') {
      parameters = {
        param1: param1,
        param2: param2,
        param3: param3,
        param4: 'object',
      };
    } else {
      parameters = {
        param1: param1 || '1',
        param2: param2 || '1',
        param3: param3 || '1',
        param4: param4 || '1',
      };
    }

    // 获取“模型作用范围”图层的多边形坐标
    const modelScopeLayer = generateMarkLayer.find(layer => layer.get('typeid') === 'modelScope');
    const modelScopeFeatures = modelScopeLayer.getSource().getFeatures();
    const modelScopeCoordinates = modelScopeFeatures.map(feature => feature.getGeometry().getCoordinates());
    parameters.modelScope = modelScopeCoordinates.length > 0 ? modelScopeCoordinates : [];

    try {
      //先保存当前页面的样本到数据库中
      await save();

      const hide = message.loading('正在调用辅助功能...');
      const result = await reqAssistFunction({
        taskid: taskId,
        user_id: userId,
        functionName: assistFunction,
        assistInput: assistInput || '150',
        parameters,
      });
      hide();
      if (result.code === 200) {
        message.success(result.message);
        window.location.reload();
      } else {
        message.error(result.message || '调用辅助功能失败');
      }
    } catch (error) {
      message.error('调用辅助功能失败：' + error.message);
    }
  };

// 模型推理
  const handleInferenceClick = async () => {
    if (!selectedModel) {
      message.error('请先选择一个推理模型！');
      return;
    }

    let taskId = getTaskId;
    const taskType = taskInfo?.data[0].type;
    const userId = getUserId();
    if (!userId) {
      message.error('无法获取用户 ID，请检查用户信息');
      return;
    }

    let parameters = {};
    if (taskType === '目标检测') {
      parameters = {
        param1: param1,
        param2: param2,
        param3: param3,
        param4: 'object',
      };
    } else {
      parameters = {
        param1: param1 || '1',
        param2: param2 || '1',
        param3: param3 || '1',
        param4: param4 || '1',
      };
    }

    // 获取“模型作用范围”图层的多边形坐标
    const modelScopeLayer = generateMarkLayer.find(layer => layer.get('typeid') === 'modelScope');
    const modelScopeFeatures = modelScopeLayer.getSource().getFeatures();
    const modelScopeCoordinates = modelScopeFeatures.map(feature => feature.getGeometry().getCoordinates());
    parameters.modelScope = modelScopeCoordinates.length > 0 ? modelScopeCoordinates : [];

    try {
      await save();
      const hide = message.loading('正在进行模型推理...');
      const result = await reqInferenceFunction({
        taskid: taskId,
        user_id: userId,
        model: selectedModel,
        parameters,
      });
      hide();
      if (result.code === 200) {
        message.success(result.message);
        window.location.reload();
      } else {
        message.error(result.message || '模型推理失败');
      }
    } catch (error) {
      message.error('模型推理失败：' + error.message);
    }
  };
  // const handleAssistClick = async () => {
  //   let taskId = getTaskId;
  //   const taskType = taskInfo?.data[0].type; // 获取任务类型
  //
  //   // 添加调试日志，确认参数值
  //   console.log('Task ID:', taskId);
  //   console.log('Task Type:', taskType);
  //   console.log('Selected Model (functionName):', assistFunction);
  //   console.log('Training Epochs (assistInput):', assistInput);
  //   console.log('Parameters:', { param1, param2, param3, param4 });
  //
  //   // 校验：如果未选择模型，阻止调用并提示
  //   if (!assistFunction || assistFunction === 'none') {
  //     message.error('请先选择一个模型！');
  //     return;
  //   }
  //
  //   // 根据任务类型定义参数
  //   let parameters = {};
  //   if (taskType === '目标检测') {
  //     // 目标检测任务，发送固定值
  //     parameters = {
  //       param1: param1,
  //       param2: param2,
  //       param3: 'object',
  //       param4: 'object',
  //     };
  //   } else {
  //     // 地物分类任务，使用用户输入值或默认值
  //     parameters = {
  //       param1: param1 || '1',  // 若为空，使用默认值
  //       param2: param2 || '1',
  //       param3: param3 || '1',
  //       param4: param4 || '1',
  //     };
  //   }
  //
  //   try {
  //
  //     //先执行保存操作
  //     await save();
  //
  //     const hide = message.loading('正在调用辅助功能...');
  //     const result = await reqAssistFunction({
  //       taskid: taskId,
  //       functionName: assistFunction, // 确保传输用户选择的模型
  //       assistInput: assistInput || '150', // 未输入时默认 150
  //       parameters,
  //     });
  //     hide();
  //     if (result.code === 200) {
  //       message.success(result.message);
  //       window.location.reload();
  //     } else {
  //       message.error(result.message || '调用辅助功能失败');
  //     }
  //   } catch (error) {
  //     message.error('调用辅助功能失败：' + error.message);
  //   }
  // };

  const isObjectDetection = taskInfo?.data[0].type === '目标检测'; // 判断是否为目标检测任务

// 定义模型选项
  const objectDetectionModels = [
    { value: 'yolo', label: 'YOLO' },
  ];
  const classificationModels = [
    { value: 'sam_box', label: 'SAM_BOX' },
    { value: 'sam', label: 'SAM' },
    { value: 'light_unet', label: 'Light UNet' },
    { value: 'unet', label: 'UNet' },
    { value: 'fast_scnn', label: 'Fast SCNN' },
    { value: 'xgboost', label: 'XGBoost' },
    { value: 'svm', label: 'SVM' },
  ];
  // const [assistInput, setAssistInput] = useState(''); // 输入训练次数
  // const [assistFunction, setAssistFunction] = useState('default'); // Default function name
  // const [param1, setParam1] = useState('');
  // const [param2, setParam2] = useState('');
  // const [param3, setParam3] = useState('');
  // const [param4, setParam4] = useState('');
  // const handleAssistClick = async () => {
  //   let taskId = getTaskId;
  //   try {
  //     const hide = message.loading('正在调用辅助功能...');
  //     const result = await reqAssistFunction({
  //       taskid: taskId,
  //       functionName: assistFunction,
  //       assistInput: assistInput, // 训练次数输入框
  //       parameters: {
  //         param1: param1,
  //         param2: param2,
  //         param3: param3,
  //         param4: param4
  //       }
  //     });
  //     hide();
  //     if (result.code === 200) {
  //       message.success(result.message);
  //       window.location.reload();
  //     } else {
  //       message.error(result.message || '调用辅助功能失败');
  //     }
  //   } catch (error) {
  //     message.error('调用辅助功能失败：' + error.message);
  //   }
  // };
  //更新新绘制样本功能
  const update_label = async () => {
    let taskId = getTaskId;
    try {

      //先执行保存操作
      await save();

      const hide = message.loading('正在更新样本...');
      const result = await reqUqdateLabel({ taskid: taskId });
      hide();
      if (result.code === 200) {
        message.success(result.message);
        // 刷新页面
        window.location.reload();
        // 不需要处理 data 了，直接删除或注释掉
        // console.log("Python script output:", result.data);  // 删除这一行
      } else {
        message.error(result.message || '样本更新失败');
      }
    } catch (error) {
      message.error('调用样本更新失败失败：' + error.message);
    }
  };
  return (
    <>
      <BasicMap setMap={setMap} />
      <div className="tools">
        <div className="taskInfo">
          任务名称：<span className="taskName">{taskInfo?.data[0].taskname}</span>
          任务类型：<span>{taskInfo?.data[0].type}</span>
        </div>

        {access.canUser ? (
          <>
            <div className="layerSelect">
              当前图层：
              <select className="select" ref={layerSelect} defaultValue={'None'}>
                <option value={'None'}>无</option>
                {/* 遍历标注人员标签方案 */}
                {/* {taskInfo.data[0].userArr &&
                  taskInfo.data[0].userArr[0].typeArr.map((item) => {
                    return (
                      <option value={item.typeid} key={item.typeid}>
                        {item.typename}
                      </option>
                    );
                  })} */}
                {taskInfo.data[0].userArr &&
                  taskInfo.data[0].userArr
                    .filter(({ username }) => username == currentUser)[0]
                    .typeArr.map((item) => {
                      return (
                        <option value={item.typeId} key={item.typeId}>
                          {item.typeName}
                        </option>
                      );
                    })}
                <option value="modelScope">模型作用范围</option>
              </select>
            </div>
            <Tag color={toolbarState.color} className="tag" />
            <div className="draw">
              标注：
              <select
                disabled={toolbarState.drawState}
                className="select"
                ref={shapeSelect}
                defaultValue={'None'}
              >
                <option value="None">无</option>
                <option value="Point">点</option>
                {/* <option value="LineString">直线</option> */}
                <option value="Box">矩形</option>
                <option value="Square">正方形</option>
                <option value="Polygon">多边形</option>
              </select>
            </div>
            <button id="delete" onClick={deleteFeature}>
              <DeleteOutlined style={{ marginRight: 4 }} />
              删除
            </button>
            <button id="undo" onClick={undo}>
              <RollbackOutlined />
            </button>
            <button id="recover" onClick={recover}>
              <RollbackOutlined className="recover" />
            </button>
            <button onClick={save}>
              <CheckOutlined style={{ marginRight: 4 }} />
              保存
            </button>
            {/*<Button onClick={handleAssistClick}>辅助功能</Button>*/}
            {!isObjectDetection && (
              <>
                <Button onClick={update_label}>更新样本</Button>
              </>
            )}
            <div className="assist-function-section">
              <div className="assist-function-select">
                模型选择：
                <select
                  className="select"
                  value={assistFunction}
                  onChange={(e) => {
                    setAssistFunction(e.target.value);
                    console.log('Model selected:', e.target.value);
                  }}
                >
                  <option value="">请选择模型</option>
                  {isObjectDetection
                    ? objectDetectionModels.map((model) => (
                      <option value={model.value} key={model.value}>
                        {model.label}
                      </option>
                    ))
                    : classificationModels.map((model) => (
                      <option value={model.value} key={model.value}>
                        {model.label}
                      </option>
                    ))}
                </select>
                <Input
                  placeholder="训练次数"
                  value={assistInput}
                  onChange={(e) => setAssistInput(e.target.value)}
                  style={{ width: 120, marginLeft: 8, marginRight: 8 }}
                />
                <Button onClick={handleAssistClick} style={{ marginLeft: 8 }}>
                  调用辅助
                </Button>
              </div>
              <div className="inference-section">
                <div className="inference-model-select">
                  推理模型：
                  <select
                    className="select"
                    value={selectedModel}
                    onChange={(e) => setSelectedModel(e.target.value)}
                  >
                    <option value="">请选择推理模型</option>
                    {modelList.map((model) => (
                      <option value={model} key={model}>
                        {model}
                      </option>
                    ))}
                  </select>
                </div>
                <Button onClick={handleInferenceClick} style={{ marginLeft: 8 }}>
                  模型推理
                </Button>
              </div>
              <div className="assist-params">
                {!isObjectDetection && (
                  <>
                    <Input
                      placeholder="最小物体大小"
                      value={param1}
                      onChange={(e) => setParam1(e.target.value)}
                      style={{ width: 110, marginRight: 8 }}
                    />
                    <Input
                      placeholder="最大孔洞大小"
                      value={param2}
                      onChange={(e) => setParam2(e.target.value)}
                      style={{ width: 110, marginRight: 8 }}
                    />
                    <Input
                      placeholder="边界平滑程度"
                      value={param3}
                      onChange={(e) => setParam3(e.target.value)}
                      style={{ width: 110, marginRight: 8 }}
                    />
                    <Input
                      placeholder="众数滤波范围"
                      value={param4}
                      onChange={(e) => setParam4(e.target.value)}
                      style={{ width: 110 }}
                    />
                  </>
                )}
                {isObjectDetection && (
                  <>
                    <Input
                      placeholder="置信度阈值"
                      value={param1}
                      onChange={(e) => setParam1(e.target.value)}
                      style={{ width: 110, marginRight: 8 }}
                    />
                    <Input
                      placeholder="输入图像尺寸"
                      value={param2}
                      onChange={(e) => setParam2(e.target.value)}
                      style={{ width: 110, marginRight: 8 }}
                    />
                    <Input
                      placeholder="目标质心最小距离"
                      value={param3}
                      onChange={(e) => setParam3(e.target.value)}
                      style={{ width: 110, marginRight: 8 }}
                    />
                  </>
                )}
              </div>
            </div>
          </>
        ) : (
          <>
            <button
              id="passOrNot"
              onClick={() => {
                setShowAuditLoader(true);
              }}
            >
              <CloseOutlined style={{ marginRight: 4 }} />
              不通过
            </button>
            <button id="passOrNot" onClick={passAudit}>
              {' '}
              <CheckOutlined style={{ marginRight: 4 }} />
              通过审核
            </button>
          </>
        )}
        {showAuditLoader && (
          <CollectionCreateForm
            visible={showAuditLoader}
            onCreate={onCreate}
            onCancel={onCancel}
            title="审核反馈"
            formItemList={() => {
              return (
                <Form.Item
                  label="未通过原因"
                  name="auditfeedback"
                  rules={[{ required: true, message: '必须输入未通过原因！' }]}
                >
                  <Input placeholder="边界、框不贴合/标注类别不符..." />
                </Form.Item>
              );
            }}
          />
        )}
        {showUploader && (
          <Uploader
            onUploadStatusChange={(flag) => {
              setShowUploader(flag);
            }}
            getShp={handleGetShp}
          />
        )}
        {/* <button
          className="button"
          id="upload"
          onClick={() => {
            setShowUploader(true);
          }}
        >
          <CloudUploadOutlined style={{ marginRight: 4 }} />
          导入
        </button> */}
        {/* <button className="button" id="export" onClick={exportFile}>
          <ShareAltOutlined style={{ marginRight: 4 }} />
          导出
        </button> */}
      </div>
    </>
  );
}
